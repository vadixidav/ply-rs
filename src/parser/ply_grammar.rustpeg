/// Grammar for PLY header

pub number -> String
	= n:$([0-9]+) { n.to_string() }

space = [ \t]+

uint -> u64
	= n:$([0-9]+) { n.parse().unwrap() }

ident -> String
	= s:$([a-zA-Z_][a-zA-Z0-9_-]*) { s.to_string() }

text -> String
	= s:$([^\n\r]+) { s.to_string() }

line_break
	= "\r\n" / [\n\r]

scalar -> ScalarType
	= "char"    { ScalarType::Char }
	/ "int8"    { ScalarType::Char }
	/ "uchar"   { ScalarType::UChar }
	/ "uint8"   { ScalarType::UChar }
	/ "short"   { ScalarType::Short }
	/ "int16"   { ScalarType::Short }
	/ "uint16"  { ScalarType::UShort }
	/ "ushort"  { ScalarType::UShort }
	/ "int32"   { ScalarType::Int }
	/ "int"     { ScalarType::Int }
	/ "uint32"  { ScalarType::UInt }
	/ "uint"    { ScalarType::UInt }
	/ "float32" { ScalarType::Float }
	/ "float"   { ScalarType::Float }
	/ "float64" { ScalarType::Double }
	/ "double"  { ScalarType::Double }

data_type -> PropertyType
	= s:scalar   { PropertyType::Scalar(s) }
	/ "list" space it:scalar space t:scalar {
		PropertyType::List(it, t)
	}

pub magic_number
	= "ply"

pub format -> (Encoding, Version)
	= "format" space "ascii" space v:version { (Encoding::Ascii, v) }
	/ "format" space "binary_big_endian" space v:version { (Encoding::BinaryBigEndian, v) }
	/ "format" space "binary_little_endian" space v:version { (Encoding::BinaryLittleEndian, v) }

version -> Version
	= maj:uint "." min:uint {
		Version {
			major: maj as u16,
			minor: min as u8,
		}
	}

pub comment -> Comment
	= "comment" space c:text {
		c.to_string()
	}
	/ "comment" space? {
		String::new()
	}

pub obj_info -> ObjInfo
	= "obj_info" space c:text { c.to_string() }

pub element -> ElementDef
	= "element" space id:$(ident) space n:uint {
		let mut e = ElementDef::new(id.to_string());
		e.count = n as usize;
		e
	}

pub property -> PropertyDef
	= "property" space data_type:data_type space id:ident {
		PropertyDef::new(id, data_type)
	}

pub end_header
	= "end_header"

pub line -> Line
	= l:trimmed_line space? line_break? { l }

trimmed_line -> Line
	= magic_number { Line::MagicNumber }
	/ end_header { Line::EndHeader }
	/ v:format { Line::Format(v) }
	/ v:obj_info { Line::ObjInfo(v) }
	/ v:comment { Line::Comment(v) }
	/ v:element { Line::Element(v) }
	/ v:property { Line::Property(v) }

any_number -> String
	= s:$([-+]? [0-9]+("."[0-9]+)?) { s.to_string() }

trimmed_data_line -> Vec<String>
	= any_number ** space
pub data_line -> Vec<String>
	= space? l:trimmed_data_line space? line_break? {l}
